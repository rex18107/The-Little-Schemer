#lang scheme

;完成以下函数


;<<:  二进制位运算左移,如输入列表(0 0 1 1) 左移 1 次以后就是(0 1 1 0) 左移 3 次是(1 0 0 0)

#;
(define (<< lst)
  _________
  )


;(<< '(1 0 1 1) 1) #(0 1 1 0)
;(<< '(0 0 1 1) 1) #(1 1 0 0)

;&:  二进制位运算与操作,输入两个列表，返回一个新列表，只有A和B列表中都为1的位才会才新列表中是1否则是0

#;
(define (& lst1 lst2)
  _________
  )

;(& '(1 0 1 1 0 0 0 1) '(0 0 1 1 0 1 0 1)) #(0 0 1 1 0 0 0 1)



;binary to decimal: 将二进制列表转为整数，如(0 0) 就是 0， (0 1) 就是1 (1 1)就是2
;提示：1011对应2^3 + 2^1 + 2^0 = 11 以此类推。 
;利用前面写的位运算来判断某一位比特是否是1
#;
(define (binary_to_decimal lst)
  _________
  )

;(binary_to_decimal '(1 0 1 1)) #11
;(binary_to_decimal '(0 0 1 1)) #3

;binary addition： 得到一个二进制列表，返回这个二进制列表 + 1的数 如(0 0 1) 返回 (0 1 0), (1 0 1 1) 返回 (1 1 0 0)
#;
(define (binary_addition lst)
  _________
  )

;(binary_addition '(1 0 1 1)) # (1 1 0 0)
;(binary_addition '(0 0 1 1)) # (1 0 0)
;(binary_addition '(1 1 1 1)) # (1 0 0 0 0)